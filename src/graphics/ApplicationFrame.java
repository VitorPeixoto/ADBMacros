package graphics;

import adbmacros.MacroController;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Vitor
 */
public class ApplicationFrame extends javax.swing.JFrame {
    private final MacroController macroController = MacroController.getInstance();
    private JToggleButton currentActiveButton = null;
    private Image recImage, 
                  stopImage,
                  playImage,
                  saveImage;
    private Image copyImage, 
                  pasteImage,
                  deleteImage;
    private Image iconImage;
    
    /**
     * Creates new form ApplicationFrame
     */
    public ApplicationFrame() {
        try {
            recImage  = ImageIO.read(getClass().getResource("/graphics/images/rec.png")).getScaledInstance(15, 15, Image.SCALE_SMOOTH);
            stopImage = ImageIO.read(getClass().getResource("/graphics/images/stop.png")).getScaledInstance(15, 15, Image.SCALE_SMOOTH);
            playImage = ImageIO.read(getClass().getResource("/graphics/images/play.png")).getScaledInstance(15, 15, Image.SCALE_SMOOTH);
            saveImage = ImageIO.read(getClass().getResource("/graphics/images/save.png")).getScaledInstance(15, 15, Image.SCALE_SMOOTH);
            
            copyImage = ImageIO.read(getClass().getResource("/graphics/images/copy.png")).getScaledInstance(15, 15, Image.SCALE_SMOOTH);
            pasteImage = ImageIO.read(getClass().getResource("/graphics/images/paste.png")).getScaledInstance(15, 15, Image.SCALE_SMOOTH);
            deleteImage = ImageIO.read(getClass().getResource("/graphics/images/delete.png")).getScaledInstance(15, 15, Image.SCALE_SMOOTH);
            
            iconImage = ImageIO.read(getClass().getResource("/graphics/images/icon.png"));
            this.setIconImage(iconImage);
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        initComponents();
        
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("/");
        addChildrenNodes(root);
        DefaultTreeModel model = new DefaultTreeModel(root);
        folderTree.setModel(model);
        
        macroPanel.setLayout(new GridLayout(0, 5, 10, 10));
        
        playLabel.setEnabled(!macroController.getTemporaryMacro().isEmpty());
        
        this.setLocationRelativeTo(null);
    }
    
    private void addChildrenNodes(DefaultMutableTreeNode parent) {
        String rawString = macroController.getDirectories();
        rawString = rawString.concat(macroController.getMacros());
        if(!rawString.isEmpty()) {
            String[] folders = rawString.split("\n");
            for (String folder : folders) {
                DefaultMutableTreeNode children = new DefaultMutableTreeNode(folder);
                parent.add(children);
            }
        }
    }
    
    private void addFolderMacros() {
        String rawString = macroController.getMacros();
        macroPanel.removeAll();
        if(!rawString.isEmpty()) {
            String[] macros = rawString.split("\n");
            for(String macro : macros) {
                macroPanel.add(getButton(macro, macro.replace(".ev", "")));
            }
        }
        macroScrollPanel.repaint();
        macroScrollPanel.revalidate();
    }
    
    private JToggleButton getButton(String name, String label) {
        JToggleButton button = new JToggleButton(label);
        button.addActionListener(e -> {
            if(button.isSelected()) {
                if(currentActiveButton != null) currentActiveButton.doClick();
                String pid = macroController.startMacro(name);
                currentActiveButton = button;
                logTextArea.append("\nMacro "+name+" running with pid "+pid+".\n");
            }
            else {
                currentActiveButton = null;
                macroController.stopMacro();
                logTextArea.append("Macro "+name+" stopped.\n");
            }
        });
        button.setSize(60, 60);
        return button;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        recLabel = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 25), new java.awt.Dimension(5, 25), new java.awt.Dimension(5, 25));
        stopLabel = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 25), new java.awt.Dimension(5, 25), new java.awt.Dimension(5, 25));
        playLabel = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 25), new java.awt.Dimension(5, 25), new java.awt.Dimension(5, 25));
        saveLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        copyLabel = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 25), new java.awt.Dimension(5, 25), new java.awt.Dimension(5, 25));
        pasteLabel = new javax.swing.JLabel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 25), new java.awt.Dimension(5, 25), new java.awt.Dimension(5, 25));
        deleteLabel = new javax.swing.JLabel();
        folderTreeScrollPanel = new javax.swing.JScrollPane();
        folderTree = new javax.swing.JTree();
        logScrollPanel = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        macroScrollPanel = new javax.swing.JScrollPane();
        macroPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toolBar.setRollover(true);
        toolBar.add(jSeparator1);

        recLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        recLabel.setIcon(new ImageIcon(recImage));
        recLabel.setAlignmentX(0.5F);
        recLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        recLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        recLabel.setMaximumSize(new java.awt.Dimension(25, 25));
        recLabel.setMinimumSize(new java.awt.Dimension(25, 25));
        recLabel.setPreferredSize(new java.awt.Dimension(25, 25));
        recLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                recLabelMouseClicked(evt);
            }
        });
        toolBar.add(recLabel);
        toolBar.add(filler1);

        stopLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopLabel.setIcon(new ImageIcon(stopImage));
        stopLabel.setToolTipText("");
        stopLabel.setAlignmentX(0.5F);
        stopLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        stopLabel.setEnabled(false);
        stopLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopLabel.setMaximumSize(new java.awt.Dimension(25, 25));
        stopLabel.setMinimumSize(new java.awt.Dimension(25, 25));
        stopLabel.setPreferredSize(new java.awt.Dimension(25, 25));
        stopLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopLabelMouseClicked(evt);
            }
        });
        toolBar.add(stopLabel);
        toolBar.add(filler2);

        playLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playLabel.setIcon(new ImageIcon(playImage));
        playLabel.setAlignmentX(0.5F);
        playLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        playLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playLabel.setMaximumSize(new java.awt.Dimension(25, 25));
        playLabel.setMinimumSize(new java.awt.Dimension(25, 25));
        playLabel.setPreferredSize(new java.awt.Dimension(25, 25));
        playLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playLabelMouseClicked(evt);
            }
        });
        toolBar.add(playLabel);
        toolBar.add(filler3);

        saveLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saveLabel.setIcon(new ImageIcon(saveImage));
        saveLabel.setAlignmentX(0.5F);
        saveLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        saveLabel.setEnabled(false);
        saveLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveLabel.setMaximumSize(new java.awt.Dimension(25, 25));
        saveLabel.setMinimumSize(new java.awt.Dimension(25, 25));
        saveLabel.setPreferredSize(new java.awt.Dimension(25, 25));
        saveLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveLabelMouseClicked(evt);
            }
        });
        toolBar.add(saveLabel);
        toolBar.add(jSeparator2);

        copyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        copyLabel.setIcon(new ImageIcon(copyImage));
        copyLabel.setAlignmentX(0.5F);
        copyLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        copyLabel.setEnabled(false);
        copyLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        copyLabel.setMaximumSize(new java.awt.Dimension(25, 25));
        copyLabel.setMinimumSize(new java.awt.Dimension(25, 25));
        copyLabel.setPreferredSize(new java.awt.Dimension(25, 25));
        copyLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                copyLabelMouseClicked(evt);
            }
        });
        toolBar.add(copyLabel);
        toolBar.add(filler4);

        pasteLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pasteLabel.setIcon(new ImageIcon(pasteImage));
        pasteLabel.setAlignmentX(0.5F);
        pasteLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pasteLabel.setEnabled(false);
        pasteLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pasteLabel.setMaximumSize(new java.awt.Dimension(25, 25));
        pasteLabel.setMinimumSize(new java.awt.Dimension(25, 25));
        pasteLabel.setPreferredSize(new java.awt.Dimension(25, 25));
        pasteLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pasteLabelMouseClicked(evt);
            }
        });
        toolBar.add(pasteLabel);
        toolBar.add(filler5);

        deleteLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteLabel.setIcon(new ImageIcon(deleteImage));
        deleteLabel.setToolTipText("");
        deleteLabel.setAlignmentX(0.5F);
        deleteLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteLabel.setEnabled(false);
        deleteLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteLabel.setMaximumSize(new java.awt.Dimension(25, 25));
        deleteLabel.setMinimumSize(new java.awt.Dimension(25, 25));
        deleteLabel.setPreferredSize(new java.awt.Dimension(25, 25));
        deleteLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteLabelMouseClicked(evt);
            }
        });
        toolBar.add(deleteLabel);

        folderTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                folderTreeValueChanged(evt);
            }
        });
        folderTreeScrollPanel.setViewportView(folderTree);

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        logScrollPanel.setViewportView(logTextArea);

        macroScrollPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        macroScrollPanel.setPreferredSize(new java.awt.Dimension(720, 420));

        macroPanel.setMaximumSize(new java.awt.Dimension(720, 32000));
        macroPanel.setPreferredSize(new java.awt.Dimension(720, 420));

        javax.swing.GroupLayout macroPanelLayout = new javax.swing.GroupLayout(macroPanel);
        macroPanel.setLayout(macroPanelLayout);
        macroPanelLayout.setHorizontalGroup(
            macroPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 811, Short.MAX_VALUE)
        );
        macroPanelLayout.setVerticalGroup(
            macroPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 438, Short.MAX_VALUE)
        );

        macroScrollPanel.setViewportView(macroPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(folderTreeScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 813, Short.MAX_VALUE)
                    .addComponent(macroScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(macroScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(folderTreeScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void folderTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_folderTreeValueChanged
    DefaultTreeModel model = (DefaultTreeModel) folderTree.getModel();
    DefaultMutableTreeNode parent = (DefaultMutableTreeNode) evt.getNewLeadSelectionPath().getLastPathComponent();
    String path = "";
    DefaultMutableTreeNode node = parent;
    while(node.getParent() != null) {
        path = node.toString() + path;
        node = (DefaultMutableTreeNode) node.getParent();
    }
    macroController.setMacroDirectory(path);
    addChildrenNodes(parent);
    addFolderMacros();
    playLabel.setEnabled(!macroController.getTemporaryMacro().isEmpty());
    copyLabel.setEnabled(parent.toString().contains(".ev"));
    deleteLabel.setEnabled(parent.toString().contains(".ev"));
    }//GEN-LAST:event_folderTreeValueChanged

    private void recLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recLabelMouseClicked
        stopLabel.setEnabled(true);
        recLabel.setEnabled(false);
        playLabel.setEnabled(false);
        saveLabel.setEnabled(false);
        macroController.startRecording();        
    }//GEN-LAST:event_recLabelMouseClicked

    private void stopLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopLabelMouseClicked
        stopLabel.setEnabled(false);
        recLabel.setEnabled(true);
        playLabel.setEnabled(true);
        saveLabel.setEnabled(true);
        macroController.stopRecording();
        macroController.stopMacro();
    }//GEN-LAST:event_stopLabelMouseClicked

    private void playLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playLabelMouseClicked
        stopLabel.setEnabled(true);
        recLabel.setEnabled(false);
        playLabel.setEnabled(false);
        saveLabel.setEnabled(false);
        macroController.startMacro("temp.tev");
    }//GEN-LAST:event_playLabelMouseClicked

    private void saveLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveLabelMouseClicked
        stopLabel.setEnabled(false);
        recLabel.setEnabled(true);
        playLabel.setEnabled(true);
        saveLabel.setEnabled(true);
        String macroName = JOptionPane.showInputDialog(this, "Digite o nome do macro: ", JOptionPane.INFORMATION_MESSAGE);
        if(!macroName.isEmpty()) {
            macroController.saveTemporaryMacro(macroName);
        }
    }//GEN-LAST:event_saveLabelMouseClicked

    private void copyLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copyLabelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_copyLabelMouseClicked

    private void pasteLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pasteLabelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_pasteLabelMouseClicked

    private void deleteLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteLabelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteLabelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApplicationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApplicationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApplicationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApplicationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApplicationFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel copyLabel;
    private javax.swing.JLabel deleteLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.JTree folderTree;
    private javax.swing.JScrollPane folderTreeScrollPanel;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JScrollPane logScrollPanel;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JPanel macroPanel;
    private javax.swing.JScrollPane macroScrollPanel;
    private javax.swing.JLabel pasteLabel;
    private javax.swing.JLabel playLabel;
    private javax.swing.JLabel recLabel;
    private javax.swing.JLabel saveLabel;
    private javax.swing.JLabel stopLabel;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
}
